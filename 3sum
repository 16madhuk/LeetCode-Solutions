


# ~ O(n^2) solution searches array 
class Solution(object):
    import collections
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums = sorted(nums) 
        output = set()
        ret = []
        for k in range(0, len(nums)):
            target = -nums[k]
            i,j = k+1, len(nums)-1
            while i < j:
                sum_two = nums[i] + nums[j]
                if sum_two < target:
                    i += 1
                elif sum_two > target:
                    j -= 1
                else:
                    output.add((nums[k],nums[i],nums[j]))
                    i += 1
                    j -= 1
        for x in output: 
            ret.append(x)
        return ret








slow: 
class Solution(object):
    import collections
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if (len(nums) < 3):
            return []
        ret = []
        soFar = []
        var = 0 
        hashMap = collections.defaultdict(list)
        for i in range(0, len(nums)):
            key = nums[i]
            val = i 
            hashMap[key].append(val)
        #hashmap is now filled. 
        for i in range(0, len(nums)):
            firstVal = nums[i]
            for x in range(i+1, len(nums)):
                secondVal = nums[x]
                targetVal = 0 - (firstVal + secondVal)
                if targetVal in hashMap:
                    if (targetVal == firstVal): 
                        if (not len(hashMap[firstVal]) >= 2):
                            continue 
                    if (targetVal == secondVal):
                        if (not len(hashMap[secondVal]) >= 2):
                            continue 
                    if (targetVal == secondVal and secondVal == firstVal):
                        if (not len(hashMap[firstVal]) >= 3):
                            continue
                    tmp = [firstVal, secondVal, targetVal]
                    tmp = sorted(tmp)
                    if (tmp not in soFar):
                        soFar.append(tmp)
        return soFar        
