class Solution(object):
    import collections
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if (len(nums) < 3):
            return []
        ret = []
        soFar = []
        var = 0 
        hashMap = collections.defaultdict(list)
        for i in range(0, len(nums)):
            key = nums[i]
            val = i 
            hashMap[key].append(val)
        #hashmap is now filled. 
        for i in range(0, len(nums)):
            firstVal = nums[i]
            for x in range(i+1, len(nums)):
                secondVal = nums[x]
                targetVal = 0 - (firstVal + secondVal)
                if targetVal in hashMap:
                    if (targetVal == firstVal): 
                        if (not len(hashMap[firstVal]) >= 2):
                            continue 
                    if (targetVal == secondVal):
                        if (not len(hashMap[secondVal]) >= 2):
                            continue 
                    if (targetVal == secondVal and secondVal == firstVal):
                        if (not len(hashMap[firstVal]) >= 3):
                            continue
                    tmp = [firstVal, secondVal, targetVal]
                    tmp = sorted(tmp)
                    if (tmp not in soFar):
                        soFar.append(tmp)
        return soFar        
