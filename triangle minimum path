class Solution:
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        DP EQUATION: dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]
        time: O(n^2)
        space: O(n^2)
        """
        dp = [[0] * len(triangle) for x in range(len(triangle))]
        dp[0][0] = triangle[0][0]
        #filling in table 
        for i in range(1, len(triangle)):
            for j in range(0,i+1):
                if j == 0: 
                    dp[i][j] = dp[i-1][j] + triangle[i][j]
                elif i == j: 
                    dp[i][j] = dp[i-1][j-1] + triangle[i][j]

                else: 
                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]
        return min(dp[-1])
        
